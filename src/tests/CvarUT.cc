// (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

#include <gmock/gmock.h>
#include <gtest/gtest.h>
#include <nccl.h>
#include <stdlib.h>
#include <set>
#include <vector>
#include "../include/nccl_cvars.h"
#include "cudawrapper.h"

class NCCLEnvironment : public ::testing::Environment {
 public:
  void SetUp() override {
    // Turn off NCCL debug logging, allow user to turn on via command line
    setenv("NCCL_DEBUG", "WARN", 0);

    cudaWrapper_ = ncclSetupWrappers(false);
  }
  ~NCCLEnvironment() override {}

  CudaWrapper* cudaWrapper_;
};

class CvarTest : public ::testing::Test {
 public:
  CvarTest() = default;
};

/**
* Utility functions
*/
template <typename T>
void checkListValues(std::vector<T> vals, std::vector<T> cvar) {
  for (int i = 0; i < vals.size(); i++) {
    EXPECT_EQ(cvar[i], vals[i]);
  }
}

void testDefaultValue(const char* cvarName) {
  unsetenv(cvarName);
  ncclCvarInit();
}

template <typename T>
void testNumValue(const char* cvarName, T val) {
  std::ostringstream varOSS;
  varOSS << val;
  std::string varStr = varOSS.str();
  setenv(cvarName, varStr.c_str(), 1);
  ncclCvarInit();
}

void testWarn(const char* cvarName, std::string expectedKeyword) {
  testing::internal::CaptureStdout();
  ncclCvarInit();
  std::string output = testing::internal::GetCapturedStdout();
  EXPECT_THAT(output, testing::HasSubstr(expectedKeyword));

  // Unset to avoid warning in later tests
  unsetenv(cvarName);
}

TEST_F(CvarTest, UnknownEnv) {
  setenv("NCCL_DUMMY_ENV", "dummy", 1);
  testWarn("NCCL_DUMMY_ENV", "Unknown env");
}

/**
* START of generated tests
*/

// Automatically generated by ./maint/extractcvars.py
// DO NOT EDIT!!!
TEST_F(CvarTest, CUDA_LAUNCH_BLOCKING_value_0) {
  setenv("CUDA_LAUNCH_BLOCKING", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(CUDA_LAUNCH_BLOCKING, "val1");
}

TEST_F(CvarTest, CUDA_LAUNCH_BLOCKING_value_1) {
  setenv("CUDA_LAUNCH_BLOCKING", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(CUDA_LAUNCH_BLOCKING, "val2_with_space");
}

TEST_F(CvarTest, NCCL_AGG_CHANNEL_SIZE_value_0) {
  testNumValue<int64_t>("NCCL_AGG_CHANNEL_SIZE", 0);
  EXPECT_EQ(NCCL_AGG_CHANNEL_SIZE, 0);
}

TEST_F(CvarTest, NCCL_AGG_CHANNEL_SIZE_value_1) {
  testNumValue<int64_t>("NCCL_AGG_CHANNEL_SIZE", 9999);
  EXPECT_EQ(NCCL_AGG_CHANNEL_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_AGG_CHANNEL_SIZE_value_2) {
  testNumValue<int64_t>("NCCL_AGG_CHANNEL_SIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_AGG_CHANNEL_SIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_AGG_CHANNEL_SIZE_value_3) {
  testNumValue<int64_t>("NCCL_AGG_CHANNEL_SIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_AGG_CHANNEL_SIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_AGG_CHANNEL_SIZE_default_value) {
  testDefaultValue("NCCL_AGG_CHANNEL_SIZE");
  EXPECT_EQ(NCCL_AGG_CHANNEL_SIZE, -2);
}

TEST_F(CvarTest, NCCL_ALGO_value_0) {
  setenv("NCCL_ALGO", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALGO, "val1");
}

TEST_F(CvarTest, NCCL_ALGO_value_1) {
  setenv("NCCL_ALGO", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALGO, "val2_with_space");
}

TEST_F(CvarTest, NCCL_ALLOC_P2P_NET_LL_BUFFERS_value_0) {
  testNumValue<int64_t>("NCCL_ALLOC_P2P_NET_LL_BUFFERS", 0);
  EXPECT_EQ(NCCL_ALLOC_P2P_NET_LL_BUFFERS, 0);
}

TEST_F(CvarTest, NCCL_ALLOC_P2P_NET_LL_BUFFERS_value_1) {
  testNumValue<int64_t>("NCCL_ALLOC_P2P_NET_LL_BUFFERS", 9999);
  EXPECT_EQ(NCCL_ALLOC_P2P_NET_LL_BUFFERS, 9999);
}

TEST_F(CvarTest, NCCL_ALLOC_P2P_NET_LL_BUFFERS_value_2) {
  testNumValue<int64_t>("NCCL_ALLOC_P2P_NET_LL_BUFFERS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_ALLOC_P2P_NET_LL_BUFFERS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_ALLOC_P2P_NET_LL_BUFFERS_value_3) {
  testNumValue<int64_t>("NCCL_ALLOC_P2P_NET_LL_BUFFERS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_ALLOC_P2P_NET_LL_BUFFERS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO_single_choice_0) {
  setenv("NCCL_ALLREDUCE_ALGO", "orig", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO, NCCL_ALLREDUCE_ALGO::orig);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO_single_choice_1) {
  setenv("NCCL_ALLREDUCE_ALGO", "dda", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO, NCCL_ALLREDUCE_ALGO::dda);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO_default_choice) {
  testDefaultValue("NCCL_ALLREDUCE_ALGO");
  EXPECT_EQ(NCCL_ALLREDUCE_ALGO, NCCL_ALLREDUCE_ALGO::orig);
}

TEST_F(CvarTest, NCCL_ALLREDUCE_ALGO_warn_unknown_val) {
  setenv("NCCL_ALLREDUCE_ALGO", "dummy", 1);
  testWarn("NCCL_ALLREDUCE_ALGO", "Unknown value");
}

TEST_F(CvarTest, NCCL_BUFFSIZE_value_0) {
  testNumValue<int64_t>("NCCL_BUFFSIZE", 0);
  EXPECT_EQ(NCCL_BUFFSIZE, 0);
}

TEST_F(CvarTest, NCCL_BUFFSIZE_value_1) {
  testNumValue<int64_t>("NCCL_BUFFSIZE", 9999);
  EXPECT_EQ(NCCL_BUFFSIZE, 9999);
}

TEST_F(CvarTest, NCCL_BUFFSIZE_value_2) {
  testNumValue<int64_t>("NCCL_BUFFSIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_BUFFSIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_BUFFSIZE_value_3) {
  testNumValue<int64_t>("NCCL_BUFFSIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_BUFFSIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_BUFFSIZE_default_value) {
  testDefaultValue("NCCL_BUFFSIZE");
  EXPECT_EQ(NCCL_BUFFSIZE, -2);
}

TEST_F(CvarTest, NCCL_CGA_CLUSTER_SIZE_value_0) {
  testNumValue<int64_t>("NCCL_CGA_CLUSTER_SIZE", 0);
  EXPECT_EQ(NCCL_CGA_CLUSTER_SIZE, 0);
}

TEST_F(CvarTest, NCCL_CGA_CLUSTER_SIZE_value_1) {
  testNumValue<int64_t>("NCCL_CGA_CLUSTER_SIZE", 9999);
  EXPECT_EQ(NCCL_CGA_CLUSTER_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_CGA_CLUSTER_SIZE_value_2) {
  testNumValue<int64_t>("NCCL_CGA_CLUSTER_SIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_CGA_CLUSTER_SIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_CGA_CLUSTER_SIZE_value_3) {
  testNumValue<int64_t>("NCCL_CGA_CLUSTER_SIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_CGA_CLUSTER_SIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_CGA_CLUSTER_SIZE_default_value) {
  testDefaultValue("NCCL_CGA_CLUSTER_SIZE");
  EXPECT_EQ(NCCL_CGA_CLUSTER_SIZE, -1);
}

TEST_F(CvarTest, NCCL_CHECK_POINTERS_value_0) {
  testNumValue<int64_t>("NCCL_CHECK_POINTERS", 0);
  EXPECT_EQ(NCCL_CHECK_POINTERS, 0);
}

TEST_F(CvarTest, NCCL_CHECK_POINTERS_value_1) {
  testNumValue<int64_t>("NCCL_CHECK_POINTERS", 9999);
  EXPECT_EQ(NCCL_CHECK_POINTERS, 9999);
}

TEST_F(CvarTest, NCCL_CHECK_POINTERS_value_2) {
  testNumValue<int64_t>("NCCL_CHECK_POINTERS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_CHECK_POINTERS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_CHECK_POINTERS_value_3) {
  testNumValue<int64_t>("NCCL_CHECK_POINTERS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_CHECK_POINTERS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_CHUNK_SIZE_value_0) {
  testNumValue<int64_t>("NCCL_CHUNK_SIZE", 0);
  EXPECT_EQ(NCCL_CHUNK_SIZE, 0);
}

TEST_F(CvarTest, NCCL_CHUNK_SIZE_value_1) {
  testNumValue<int64_t>("NCCL_CHUNK_SIZE", 9999);
  EXPECT_EQ(NCCL_CHUNK_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_CHUNK_SIZE_value_2) {
  testNumValue<int64_t>("NCCL_CHUNK_SIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_CHUNK_SIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_CHUNK_SIZE_value_3) {
  testNumValue<int64_t>("NCCL_CHUNK_SIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_CHUNK_SIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_COLLNET_ENABLE_value_0) {
  setenv("NCCL_COLLNET_ENABLE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_COLLNET_ENABLE, "val1");
}

TEST_F(CvarTest, NCCL_COLLNET_ENABLE_value_1) {
  setenv("NCCL_COLLNET_ENABLE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_COLLNET_ENABLE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_COLLNET_NODE_THRESHOLD_value_0) {
  testNumValue<int64_t>("NCCL_COLLNET_NODE_THRESHOLD", 0);
  EXPECT_EQ(NCCL_COLLNET_NODE_THRESHOLD, 0);
}

TEST_F(CvarTest, NCCL_COLLNET_NODE_THRESHOLD_value_1) {
  testNumValue<int64_t>("NCCL_COLLNET_NODE_THRESHOLD", 9999);
  EXPECT_EQ(NCCL_COLLNET_NODE_THRESHOLD, 9999);
}

TEST_F(CvarTest, NCCL_COLLNET_NODE_THRESHOLD_value_2) {
  testNumValue<int64_t>("NCCL_COLLNET_NODE_THRESHOLD", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_COLLNET_NODE_THRESHOLD, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_COLLNET_NODE_THRESHOLD_value_3) {
  testNumValue<int64_t>("NCCL_COLLNET_NODE_THRESHOLD", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_COLLNET_NODE_THRESHOLD, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_COLLNET_NODE_THRESHOLD_default_value) {
  testDefaultValue("NCCL_COLLNET_NODE_THRESHOLD");
  EXPECT_EQ(NCCL_COLLNET_NODE_THRESHOLD, 2);
}

TEST_F(CvarTest, NCCL_COMM_BLOCKING_value_0) {
  testNumValue<int64_t>("NCCL_COMM_BLOCKING", 0);
  EXPECT_EQ(NCCL_COMM_BLOCKING, 0);
}

TEST_F(CvarTest, NCCL_COMM_BLOCKING_value_1) {
  testNumValue<int64_t>("NCCL_COMM_BLOCKING", 9999);
  EXPECT_EQ(NCCL_COMM_BLOCKING, 9999);
}

TEST_F(CvarTest, NCCL_COMM_BLOCKING_value_2) {
  testNumValue<int64_t>("NCCL_COMM_BLOCKING", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_COMM_BLOCKING, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_COMM_BLOCKING_value_3) {
  testNumValue<int64_t>("NCCL_COMM_BLOCKING", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_COMM_BLOCKING, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_COMM_BLOCKING_default_value) {
  testDefaultValue("NCCL_COMM_BLOCKING");
  EXPECT_EQ(NCCL_COMM_BLOCKING, -1);
}

TEST_F(CvarTest, NCCL_COMM_ID_value_0) {
  setenv("NCCL_COMM_ID", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_COMM_ID, "val1");
}

TEST_F(CvarTest, NCCL_COMM_ID_value_1) {
  setenv("NCCL_COMM_ID", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_COMM_ID, "val2_with_space");
}

TEST_F(CvarTest, NCCL_COMM_SPLIT_SHARE_RESOURCES_value_0) {
  testNumValue<int>("NCCL_COMM_SPLIT_SHARE_RESOURCES", 0);
  EXPECT_EQ(NCCL_COMM_SPLIT_SHARE_RESOURCES, 0);
}

TEST_F(CvarTest, NCCL_COMM_SPLIT_SHARE_RESOURCES_value_1) {
  testNumValue<int>("NCCL_COMM_SPLIT_SHARE_RESOURCES", 9999);
  EXPECT_EQ(NCCL_COMM_SPLIT_SHARE_RESOURCES, 9999);
}

TEST_F(CvarTest, NCCL_COMM_SPLIT_SHARE_RESOURCES_value_2) {
  testNumValue<int>("NCCL_COMM_SPLIT_SHARE_RESOURCES", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_COMM_SPLIT_SHARE_RESOURCES, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_COMM_SPLIT_SHARE_RESOURCES_value_3) {
  testNumValue<int>("NCCL_COMM_SPLIT_SHARE_RESOURCES", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_COMM_SPLIT_SHARE_RESOURCES, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_COMM_SPLIT_SHARE_RESOURCES_default_value) {
  testDefaultValue("NCCL_COMM_SPLIT_SHARE_RESOURCES");
  EXPECT_EQ(NCCL_COMM_SPLIT_SHARE_RESOURCES, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_CONNECT_ROUND_MAX_PEERS_value_0) {
  testNumValue<int64_t>("NCCL_CONNECT_ROUND_MAX_PEERS", 0);
  EXPECT_EQ(NCCL_CONNECT_ROUND_MAX_PEERS, 0);
}

TEST_F(CvarTest, NCCL_CONNECT_ROUND_MAX_PEERS_value_1) {
  testNumValue<int64_t>("NCCL_CONNECT_ROUND_MAX_PEERS", 9999);
  EXPECT_EQ(NCCL_CONNECT_ROUND_MAX_PEERS, 9999);
}

TEST_F(CvarTest, NCCL_CONNECT_ROUND_MAX_PEERS_value_2) {
  testNumValue<int64_t>("NCCL_CONNECT_ROUND_MAX_PEERS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_CONNECT_ROUND_MAX_PEERS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_CONNECT_ROUND_MAX_PEERS_value_3) {
  testNumValue<int64_t>("NCCL_CONNECT_ROUND_MAX_PEERS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_CONNECT_ROUND_MAX_PEERS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_CONNECT_ROUND_MAX_PEERS_default_value) {
  testDefaultValue("NCCL_CONNECT_ROUND_MAX_PEERS");
  EXPECT_EQ(NCCL_CONNECT_ROUND_MAX_PEERS, 128);
}

TEST_F(CvarTest, NCCL_CREATE_THREAD_CONTEXT_value_0) {
  testNumValue<int64_t>("NCCL_CREATE_THREAD_CONTEXT", 0);
  EXPECT_EQ(NCCL_CREATE_THREAD_CONTEXT, 0);
}

TEST_F(CvarTest, NCCL_CREATE_THREAD_CONTEXT_value_1) {
  testNumValue<int64_t>("NCCL_CREATE_THREAD_CONTEXT", 9999);
  EXPECT_EQ(NCCL_CREATE_THREAD_CONTEXT, 9999);
}

TEST_F(CvarTest, NCCL_CREATE_THREAD_CONTEXT_value_2) {
  testNumValue<int64_t>("NCCL_CREATE_THREAD_CONTEXT", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_CREATE_THREAD_CONTEXT, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_CREATE_THREAD_CONTEXT_value_3) {
  testNumValue<int64_t>("NCCL_CREATE_THREAD_CONTEXT", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_CREATE_THREAD_CONTEXT, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_CROSS_NIC_value_0) {
  testNumValue<int64_t>("NCCL_CROSS_NIC", 0);
  EXPECT_EQ(NCCL_CROSS_NIC, 0);
}

TEST_F(CvarTest, NCCL_CROSS_NIC_value_1) {
  testNumValue<int64_t>("NCCL_CROSS_NIC", 9999);
  EXPECT_EQ(NCCL_CROSS_NIC, 9999);
}

TEST_F(CvarTest, NCCL_CROSS_NIC_value_2) {
  testNumValue<int64_t>("NCCL_CROSS_NIC", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_CROSS_NIC, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_CROSS_NIC_value_3) {
  testNumValue<int64_t>("NCCL_CROSS_NIC", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_CROSS_NIC, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_CROSS_NIC_default_value) {
  testDefaultValue("NCCL_CROSS_NIC");
  EXPECT_EQ(NCCL_CROSS_NIC, 2);
}

TEST_F(CvarTest, NCCL_CUDA_PATH_value_0) {
  setenv("NCCL_CUDA_PATH", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CUDA_PATH, "val1");
}

TEST_F(CvarTest, NCCL_CUDA_PATH_value_1) {
  setenv("NCCL_CUDA_PATH", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_CUDA_PATH, "val2_with_space");
}

TEST_F(CvarTest, NCCL_CUMEM_ENABLE_value_0) {
  testNumValue<int64_t>("NCCL_CUMEM_ENABLE", 0);
  EXPECT_EQ(NCCL_CUMEM_ENABLE, 0);
}

TEST_F(CvarTest, NCCL_CUMEM_ENABLE_value_1) {
  testNumValue<int64_t>("NCCL_CUMEM_ENABLE", 9999);
  EXPECT_EQ(NCCL_CUMEM_ENABLE, 9999);
}

TEST_F(CvarTest, NCCL_CUMEM_ENABLE_value_2) {
  testNumValue<int64_t>("NCCL_CUMEM_ENABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_CUMEM_ENABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_CUMEM_ENABLE_value_3) {
  testNumValue<int64_t>("NCCL_CUMEM_ENABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_CUMEM_ENABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_CUMEM_ENABLE_default_value) {
  testDefaultValue("NCCL_CUMEM_ENABLE");
  EXPECT_EQ(NCCL_CUMEM_ENABLE, -2);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_value_0) {
  testNumValue<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", 0);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, 0);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_value_1) {
  testNumValue<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", 9999);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, 9999);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_value_2) {
  testNumValue<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_value_3) {
  testNumValue<int>("NCCL_DDA_ALLREDUCE_MAX_BLOCKS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_MAX_BLOCKS_default_value) {
  testDefaultValue("NCCL_DDA_ALLREDUCE_MAX_BLOCKS");
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_MAX_BLOCKS, 24);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD_value_0) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD", 0);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD, 0);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD_value_1) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD", 9999);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD, 9999);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD_value_2) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD_value_3) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD_default_value) {
  testDefaultValue("NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD");
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_SCATGAT_THRESHOLD, 1048576);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_value_0) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD", 0);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD, 0);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_value_1) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD", 9999);
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD, 9999);
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_value_2) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_value_3) {
  testNumValue<uint64_t>("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA_ALLREDUCE_TREE_THRESHOLD_default_value) {
  testDefaultValue("NCCL_DDA_ALLREDUCE_TREE_THRESHOLD");
  EXPECT_EQ(NCCL_DDA_ALLREDUCE_TREE_THRESHOLD, 262144);
}

TEST_F(CvarTest, NCCL_DDA_TMPBUFF_SIZE_value_0) {
  testNumValue<uint64_t>("NCCL_DDA_TMPBUFF_SIZE", 0);
  EXPECT_EQ(NCCL_DDA_TMPBUFF_SIZE, 0);
}

TEST_F(CvarTest, NCCL_DDA_TMPBUFF_SIZE_value_1) {
  testNumValue<uint64_t>("NCCL_DDA_TMPBUFF_SIZE", 9999);
  EXPECT_EQ(NCCL_DDA_TMPBUFF_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_DDA_TMPBUFF_SIZE_value_2) {
  testNumValue<uint64_t>("NCCL_DDA_TMPBUFF_SIZE", std::numeric_limits<uint64_t>::max());
  EXPECT_EQ(NCCL_DDA_TMPBUFF_SIZE, std::numeric_limits<uint64_t>::max());
}

TEST_F(CvarTest, NCCL_DDA_TMPBUFF_SIZE_value_3) {
  testNumValue<uint64_t>("NCCL_DDA_TMPBUFF_SIZE", std::numeric_limits<uint64_t>::min());
  EXPECT_EQ(NCCL_DDA_TMPBUFF_SIZE, std::numeric_limits<uint64_t>::min());
}

TEST_F(CvarTest, NCCL_DDA_TMPBUFF_SIZE_default_value) {
  testDefaultValue("NCCL_DDA_TMPBUFF_SIZE");
  EXPECT_EQ(NCCL_DDA_TMPBUFF_SIZE, 33554432);
}

TEST_F(CvarTest, NCCL_DEBUG_value_0) {
  setenv("NCCL_DEBUG", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_DEBUG, "val1");
}

TEST_F(CvarTest, NCCL_DEBUG_value_1) {
  setenv("NCCL_DEBUG", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_DEBUG, "val2_with_space");
}

TEST_F(CvarTest, NCCL_DEBUG_FILE_value_0) {
  setenv("NCCL_DEBUG_FILE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_DEBUG_FILE, "val1");
}

TEST_F(CvarTest, NCCL_DEBUG_FILE_value_1) {
  setenv("NCCL_DEBUG_FILE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_DEBUG_FILE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_DEBUG_SUBSYS_value_0) {
  setenv("NCCL_DEBUG_SUBSYS", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_DEBUG_SUBSYS, "val1");
}

TEST_F(CvarTest, NCCL_DEBUG_SUBSYS_value_1) {
  setenv("NCCL_DEBUG_SUBSYS", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_DEBUG_SUBSYS, "val2_with_space");
}

TEST_F(CvarTest, NCCL_DMABUF_ENABLE_value_0) {
  testNumValue<int64_t>("NCCL_DMABUF_ENABLE", 0);
  EXPECT_EQ(NCCL_DMABUF_ENABLE, 0);
}

TEST_F(CvarTest, NCCL_DMABUF_ENABLE_value_1) {
  testNumValue<int64_t>("NCCL_DMABUF_ENABLE", 9999);
  EXPECT_EQ(NCCL_DMABUF_ENABLE, 9999);
}

TEST_F(CvarTest, NCCL_DMABUF_ENABLE_value_2) {
  testNumValue<int64_t>("NCCL_DMABUF_ENABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_DMABUF_ENABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_DMABUF_ENABLE_value_3) {
  testNumValue<int64_t>("NCCL_DMABUF_ENABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_DMABUF_ENABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_DMABUF_ENABLE_default_value) {
  testDefaultValue("NCCL_DMABUF_ENABLE");
  EXPECT_EQ(NCCL_DMABUF_ENABLE, 1);
}

TEST_F(CvarTest, NCCL_GDRCOPY_ENABLE_value_0) {
  testNumValue<int64_t>("NCCL_GDRCOPY_ENABLE", 0);
  EXPECT_EQ(NCCL_GDRCOPY_ENABLE, 0);
}

TEST_F(CvarTest, NCCL_GDRCOPY_ENABLE_value_1) {
  testNumValue<int64_t>("NCCL_GDRCOPY_ENABLE", 9999);
  EXPECT_EQ(NCCL_GDRCOPY_ENABLE, 9999);
}

TEST_F(CvarTest, NCCL_GDRCOPY_ENABLE_value_2) {
  testNumValue<int64_t>("NCCL_GDRCOPY_ENABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_GDRCOPY_ENABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_GDRCOPY_ENABLE_value_3) {
  testNumValue<int64_t>("NCCL_GDRCOPY_ENABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_GDRCOPY_ENABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_GDRCOPY_FIFO_ENABLE_value_0) {
  testNumValue<int64_t>("NCCL_GDRCOPY_FIFO_ENABLE", 0);
  EXPECT_EQ(NCCL_GDRCOPY_FIFO_ENABLE, 0);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FIFO_ENABLE_value_1) {
  testNumValue<int64_t>("NCCL_GDRCOPY_FIFO_ENABLE", 9999);
  EXPECT_EQ(NCCL_GDRCOPY_FIFO_ENABLE, 9999);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FIFO_ENABLE_value_2) {
  testNumValue<int64_t>("NCCL_GDRCOPY_FIFO_ENABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_GDRCOPY_FIFO_ENABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_GDRCOPY_FIFO_ENABLE_value_3) {
  testNumValue<int64_t>("NCCL_GDRCOPY_FIFO_ENABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_GDRCOPY_FIFO_ENABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_GDRCOPY_FIFO_ENABLE_default_value) {
  testDefaultValue("NCCL_GDRCOPY_FIFO_ENABLE");
  EXPECT_EQ(NCCL_GDRCOPY_FIFO_ENABLE, 1);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_value_y0) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GDRCOPY_FLUSH_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_value_y1) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GDRCOPY_FLUSH_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_value_y2) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GDRCOPY_FLUSH_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_value_y3) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GDRCOPY_FLUSH_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_value_n0) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GDRCOPY_FLUSH_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_value_n1) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GDRCOPY_FLUSH_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_value_n2) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GDRCOPY_FLUSH_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_value_n3) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GDRCOPY_FLUSH_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_FLUSH_ENABLE_warn_unknown_val) {
  setenv("NCCL_GDRCOPY_FLUSH_ENABLE", "dummy", 1);
  testWarn("NCCL_GDRCOPY_FLUSH_ENABLE", "Unknown value");
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_value_y0) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_value_y1) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_value_y2) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_value_y3) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_value_n0) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_value_n1) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_value_n2) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_value_n3) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_default_value) {
  testDefaultValue("NCCL_GDRCOPY_SYNC_ENABLE");
  EXPECT_TRUE(NCCL_GDRCOPY_SYNC_ENABLE);
}

TEST_F(CvarTest, NCCL_GDRCOPY_SYNC_ENABLE_warn_unknown_val) {
  setenv("NCCL_GDRCOPY_SYNC_ENABLE", "dummy", 1);
  testWarn("NCCL_GDRCOPY_SYNC_ENABLE", "Unknown value");
}

TEST_F(CvarTest, NCCL_GDR_FLUSH_DISABLE_value_0) {
  testNumValue<int64_t>("NCCL_GDR_FLUSH_DISABLE", 0);
  EXPECT_EQ(NCCL_GDR_FLUSH_DISABLE, 0);
}

TEST_F(CvarTest, NCCL_GDR_FLUSH_DISABLE_value_1) {
  testNumValue<int64_t>("NCCL_GDR_FLUSH_DISABLE", 9999);
  EXPECT_EQ(NCCL_GDR_FLUSH_DISABLE, 9999);
}

TEST_F(CvarTest, NCCL_GDR_FLUSH_DISABLE_value_2) {
  testNumValue<int64_t>("NCCL_GDR_FLUSH_DISABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_GDR_FLUSH_DISABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_GDR_FLUSH_DISABLE_value_3) {
  testNumValue<int64_t>("NCCL_GDR_FLUSH_DISABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_GDR_FLUSH_DISABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_GRAPH_DUMP_FILE_value_0) {
  setenv("NCCL_GRAPH_DUMP_FILE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_GRAPH_DUMP_FILE, "val1");
}

TEST_F(CvarTest, NCCL_GRAPH_DUMP_FILE_value_1) {
  setenv("NCCL_GRAPH_DUMP_FILE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_GRAPH_DUMP_FILE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_GRAPH_DUMP_FILE_RANK_value_0) {
  testNumValue<int64_t>("NCCL_GRAPH_DUMP_FILE_RANK", 0);
  EXPECT_EQ(NCCL_GRAPH_DUMP_FILE_RANK, 0);
}

TEST_F(CvarTest, NCCL_GRAPH_DUMP_FILE_RANK_value_1) {
  testNumValue<int64_t>("NCCL_GRAPH_DUMP_FILE_RANK", 9999);
  EXPECT_EQ(NCCL_GRAPH_DUMP_FILE_RANK, 9999);
}

TEST_F(CvarTest, NCCL_GRAPH_DUMP_FILE_RANK_value_2) {
  testNumValue<int64_t>("NCCL_GRAPH_DUMP_FILE_RANK", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_GRAPH_DUMP_FILE_RANK, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_GRAPH_DUMP_FILE_RANK_value_3) {
  testNumValue<int64_t>("NCCL_GRAPH_DUMP_FILE_RANK", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_GRAPH_DUMP_FILE_RANK, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_GRAPH_FILE_value_0) {
  setenv("NCCL_GRAPH_FILE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_GRAPH_FILE, "val1");
}

TEST_F(CvarTest, NCCL_GRAPH_FILE_value_1) {
  setenv("NCCL_GRAPH_FILE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_GRAPH_FILE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_value_y0) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_value_y1) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_value_y2) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_value_y3) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_value_n0) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_value_n1) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_value_n2) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_value_n3) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_default_value) {
  testDefaultValue("NCCL_GRAPH_MIXING_SUPPORT");
  EXPECT_TRUE(NCCL_GRAPH_MIXING_SUPPORT);
}

TEST_F(CvarTest, NCCL_GRAPH_MIXING_SUPPORT_warn_unknown_val) {
  setenv("NCCL_GRAPH_MIXING_SUPPORT", "dummy", 1);
  testWarn("NCCL_GRAPH_MIXING_SUPPORT", "Unknown value");
}

TEST_F(CvarTest, NCCL_GRAPH_REGISTER_value_0) {
  testNumValue<int64_t>("NCCL_GRAPH_REGISTER", 0);
  EXPECT_EQ(NCCL_GRAPH_REGISTER, 0);
}

TEST_F(CvarTest, NCCL_GRAPH_REGISTER_value_1) {
  testNumValue<int64_t>("NCCL_GRAPH_REGISTER", 9999);
  EXPECT_EQ(NCCL_GRAPH_REGISTER, 9999);
}

TEST_F(CvarTest, NCCL_GRAPH_REGISTER_value_2) {
  testNumValue<int64_t>("NCCL_GRAPH_REGISTER", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_GRAPH_REGISTER, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_GRAPH_REGISTER_value_3) {
  testNumValue<int64_t>("NCCL_GRAPH_REGISTER", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_GRAPH_REGISTER, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_GRAPH_REGISTER_default_value) {
  testDefaultValue("NCCL_GRAPH_REGISTER");
  EXPECT_EQ(NCCL_GRAPH_REGISTER, 1);
}

TEST_F(CvarTest, NCCL_HOSTID_value_0) {
  setenv("NCCL_HOSTID", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_HOSTID, "val1");
}

TEST_F(CvarTest, NCCL_HOSTID_value_1) {
  setenv("NCCL_HOSTID", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_HOSTID, "val2_with_space");
}

TEST_F(CvarTest, NCCL_IB_ADAPTIVE_ROUTING_value_0) {
  testNumValue<int64_t>("NCCL_IB_ADAPTIVE_ROUTING", 0);
  EXPECT_EQ(NCCL_IB_ADAPTIVE_ROUTING, 0);
}

TEST_F(CvarTest, NCCL_IB_ADAPTIVE_ROUTING_value_1) {
  testNumValue<int64_t>("NCCL_IB_ADAPTIVE_ROUTING", 9999);
  EXPECT_EQ(NCCL_IB_ADAPTIVE_ROUTING, 9999);
}

TEST_F(CvarTest, NCCL_IB_ADAPTIVE_ROUTING_value_2) {
  testNumValue<int64_t>("NCCL_IB_ADAPTIVE_ROUTING", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_ADAPTIVE_ROUTING, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_ADAPTIVE_ROUTING_value_3) {
  testNumValue<int64_t>("NCCL_IB_ADAPTIVE_ROUTING", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_ADAPTIVE_ROUTING, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_ADAPTIVE_ROUTING_default_value) {
  testDefaultValue("NCCL_IB_ADAPTIVE_ROUTING");
  EXPECT_EQ(NCCL_IB_ADAPTIVE_ROUTING, -2);
}

TEST_F(CvarTest, NCCL_IB_AR_THRESHOLD_value_0) {
  testNumValue<int64_t>("NCCL_IB_AR_THRESHOLD", 0);
  EXPECT_EQ(NCCL_IB_AR_THRESHOLD, 0);
}

TEST_F(CvarTest, NCCL_IB_AR_THRESHOLD_value_1) {
  testNumValue<int64_t>("NCCL_IB_AR_THRESHOLD", 9999);
  EXPECT_EQ(NCCL_IB_AR_THRESHOLD, 9999);
}

TEST_F(CvarTest, NCCL_IB_AR_THRESHOLD_value_2) {
  testNumValue<int64_t>("NCCL_IB_AR_THRESHOLD", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_AR_THRESHOLD, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_AR_THRESHOLD_value_3) {
  testNumValue<int64_t>("NCCL_IB_AR_THRESHOLD", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_AR_THRESHOLD, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_AR_THRESHOLD_default_value) {
  testDefaultValue("NCCL_IB_AR_THRESHOLD");
  EXPECT_EQ(NCCL_IB_AR_THRESHOLD, 8192);
}

TEST_F(CvarTest, NCCL_IB_DISABLE_value_0) {
  testNumValue<int64_t>("NCCL_IB_DISABLE", 0);
  EXPECT_EQ(NCCL_IB_DISABLE, 0);
}

TEST_F(CvarTest, NCCL_IB_DISABLE_value_1) {
  testNumValue<int64_t>("NCCL_IB_DISABLE", 9999);
  EXPECT_EQ(NCCL_IB_DISABLE, 9999);
}

TEST_F(CvarTest, NCCL_IB_DISABLE_value_2) {
  testNumValue<int64_t>("NCCL_IB_DISABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_DISABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_DISABLE_value_3) {
  testNumValue<int64_t>("NCCL_IB_DISABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_DISABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_GID_INDEX_value_0) {
  testNumValue<int64_t>("NCCL_IB_GID_INDEX", 0);
  EXPECT_EQ(NCCL_IB_GID_INDEX, 0);
}

TEST_F(CvarTest, NCCL_IB_GID_INDEX_value_1) {
  testNumValue<int64_t>("NCCL_IB_GID_INDEX", 9999);
  EXPECT_EQ(NCCL_IB_GID_INDEX, 9999);
}

TEST_F(CvarTest, NCCL_IB_GID_INDEX_value_2) {
  testNumValue<int64_t>("NCCL_IB_GID_INDEX", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_GID_INDEX, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_GID_INDEX_value_3) {
  testNumValue<int64_t>("NCCL_IB_GID_INDEX", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_GID_INDEX, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_MERGE_VFS_value_0) {
  testNumValue<int64_t>("NCCL_IB_MERGE_VFS", 0);
  EXPECT_EQ(NCCL_IB_MERGE_VFS, 0);
}

TEST_F(CvarTest, NCCL_IB_MERGE_VFS_value_1) {
  testNumValue<int64_t>("NCCL_IB_MERGE_VFS", 9999);
  EXPECT_EQ(NCCL_IB_MERGE_VFS, 9999);
}

TEST_F(CvarTest, NCCL_IB_MERGE_VFS_value_2) {
  testNumValue<int64_t>("NCCL_IB_MERGE_VFS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_MERGE_VFS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_MERGE_VFS_value_3) {
  testNumValue<int64_t>("NCCL_IB_MERGE_VFS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_MERGE_VFS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_MERGE_VFS_default_value) {
  testDefaultValue("NCCL_IB_MERGE_VFS");
  EXPECT_EQ(NCCL_IB_MERGE_VFS, 1);
}

TEST_F(CvarTest, NCCL_IB_PCI_RELAXED_ORDERING_value_0) {
  testNumValue<int64_t>("NCCL_IB_PCI_RELAXED_ORDERING", 0);
  EXPECT_EQ(NCCL_IB_PCI_RELAXED_ORDERING, 0);
}

TEST_F(CvarTest, NCCL_IB_PCI_RELAXED_ORDERING_value_1) {
  testNumValue<int64_t>("NCCL_IB_PCI_RELAXED_ORDERING", 9999);
  EXPECT_EQ(NCCL_IB_PCI_RELAXED_ORDERING, 9999);
}

TEST_F(CvarTest, NCCL_IB_PCI_RELAXED_ORDERING_value_2) {
  testNumValue<int64_t>("NCCL_IB_PCI_RELAXED_ORDERING", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_PCI_RELAXED_ORDERING, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_PCI_RELAXED_ORDERING_value_3) {
  testNumValue<int64_t>("NCCL_IB_PCI_RELAXED_ORDERING", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_PCI_RELAXED_ORDERING, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_PCI_RELAXED_ORDERING_default_value) {
  testDefaultValue("NCCL_IB_PCI_RELAXED_ORDERING");
  EXPECT_EQ(NCCL_IB_PCI_RELAXED_ORDERING, 2);
}

TEST_F(CvarTest, NCCL_IB_PKEY_value_0) {
  testNumValue<int64_t>("NCCL_IB_PKEY", 0);
  EXPECT_EQ(NCCL_IB_PKEY, 0);
}

TEST_F(CvarTest, NCCL_IB_PKEY_value_1) {
  testNumValue<int64_t>("NCCL_IB_PKEY", 9999);
  EXPECT_EQ(NCCL_IB_PKEY, 9999);
}

TEST_F(CvarTest, NCCL_IB_PKEY_value_2) {
  testNumValue<int64_t>("NCCL_IB_PKEY", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_PKEY, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_PKEY_value_3) {
  testNumValue<int64_t>("NCCL_IB_PKEY", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_PKEY, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_QPS_PER_CONNECTION_value_0) {
  testNumValue<int64_t>("NCCL_IB_QPS_PER_CONNECTION", 0);
  EXPECT_EQ(NCCL_IB_QPS_PER_CONNECTION, 0);
}

TEST_F(CvarTest, NCCL_IB_QPS_PER_CONNECTION_value_1) {
  testNumValue<int64_t>("NCCL_IB_QPS_PER_CONNECTION", 9999);
  EXPECT_EQ(NCCL_IB_QPS_PER_CONNECTION, 9999);
}

TEST_F(CvarTest, NCCL_IB_QPS_PER_CONNECTION_value_2) {
  testNumValue<int64_t>("NCCL_IB_QPS_PER_CONNECTION", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_QPS_PER_CONNECTION, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_QPS_PER_CONNECTION_value_3) {
  testNumValue<int64_t>("NCCL_IB_QPS_PER_CONNECTION", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_QPS_PER_CONNECTION, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_QPS_PER_CONNECTION_default_value) {
  testDefaultValue("NCCL_IB_QPS_PER_CONNECTION");
  EXPECT_EQ(NCCL_IB_QPS_PER_CONNECTION, 1);
}

TEST_F(CvarTest, NCCL_IB_RETRY_CNT_value_0) {
  testNumValue<int64_t>("NCCL_IB_RETRY_CNT", 0);
  EXPECT_EQ(NCCL_IB_RETRY_CNT, 0);
}

TEST_F(CvarTest, NCCL_IB_RETRY_CNT_value_1) {
  testNumValue<int64_t>("NCCL_IB_RETRY_CNT", 9999);
  EXPECT_EQ(NCCL_IB_RETRY_CNT, 9999);
}

TEST_F(CvarTest, NCCL_IB_RETRY_CNT_value_2) {
  testNumValue<int64_t>("NCCL_IB_RETRY_CNT", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_RETRY_CNT, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_RETRY_CNT_value_3) {
  testNumValue<int64_t>("NCCL_IB_RETRY_CNT", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_RETRY_CNT, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_RETRY_CNT_default_value) {
  testDefaultValue("NCCL_IB_RETRY_CNT");
  EXPECT_EQ(NCCL_IB_RETRY_CNT, 7);
}

TEST_F(CvarTest, NCCL_IB_SL_value_0) {
  testNumValue<int64_t>("NCCL_IB_SL", 0);
  EXPECT_EQ(NCCL_IB_SL, 0);
}

TEST_F(CvarTest, NCCL_IB_SL_value_1) {
  testNumValue<int64_t>("NCCL_IB_SL", 9999);
  EXPECT_EQ(NCCL_IB_SL, 9999);
}

TEST_F(CvarTest, NCCL_IB_SL_value_2) {
  testNumValue<int64_t>("NCCL_IB_SL", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_SL, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_SL_value_3) {
  testNumValue<int64_t>("NCCL_IB_SL", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_SL, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_SPLIT_DATA_ON_QPS_value_0) {
  testNumValue<int64_t>("NCCL_IB_SPLIT_DATA_ON_QPS", 0);
  EXPECT_EQ(NCCL_IB_SPLIT_DATA_ON_QPS, 0);
}

TEST_F(CvarTest, NCCL_IB_SPLIT_DATA_ON_QPS_value_1) {
  testNumValue<int64_t>("NCCL_IB_SPLIT_DATA_ON_QPS", 9999);
  EXPECT_EQ(NCCL_IB_SPLIT_DATA_ON_QPS, 9999);
}

TEST_F(CvarTest, NCCL_IB_SPLIT_DATA_ON_QPS_value_2) {
  testNumValue<int64_t>("NCCL_IB_SPLIT_DATA_ON_QPS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_SPLIT_DATA_ON_QPS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_SPLIT_DATA_ON_QPS_value_3) {
  testNumValue<int64_t>("NCCL_IB_SPLIT_DATA_ON_QPS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_SPLIT_DATA_ON_QPS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_SPLIT_DATA_ON_QPS_default_value) {
  testDefaultValue("NCCL_IB_SPLIT_DATA_ON_QPS");
  EXPECT_EQ(NCCL_IB_SPLIT_DATA_ON_QPS, 1);
}

TEST_F(CvarTest, NCCL_IB_TC_value_0) {
  testNumValue<int64_t>("NCCL_IB_TC", 0);
  EXPECT_EQ(NCCL_IB_TC, 0);
}

TEST_F(CvarTest, NCCL_IB_TC_value_1) {
  testNumValue<int64_t>("NCCL_IB_TC", 9999);
  EXPECT_EQ(NCCL_IB_TC, 9999);
}

TEST_F(CvarTest, NCCL_IB_TC_value_2) {
  testNumValue<int64_t>("NCCL_IB_TC", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_TC, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_TC_value_3) {
  testNumValue<int64_t>("NCCL_IB_TC", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_TC, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_TIMEOUT_value_0) {
  testNumValue<int64_t>("NCCL_IB_TIMEOUT", 0);
  EXPECT_EQ(NCCL_IB_TIMEOUT, 0);
}

TEST_F(CvarTest, NCCL_IB_TIMEOUT_value_1) {
  testNumValue<int64_t>("NCCL_IB_TIMEOUT", 9999);
  EXPECT_EQ(NCCL_IB_TIMEOUT, 9999);
}

TEST_F(CvarTest, NCCL_IB_TIMEOUT_value_2) {
  testNumValue<int64_t>("NCCL_IB_TIMEOUT", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_TIMEOUT, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_TIMEOUT_value_3) {
  testNumValue<int64_t>("NCCL_IB_TIMEOUT", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_TIMEOUT, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IB_TIMEOUT_default_value) {
  testDefaultValue("NCCL_IB_TIMEOUT");
  EXPECT_EQ(NCCL_IB_TIMEOUT, 18);
}

TEST_F(CvarTest, NCCL_IB_USE_INLINE_value_0) {
  testNumValue<int64_t>("NCCL_IB_USE_INLINE", 0);
  EXPECT_EQ(NCCL_IB_USE_INLINE, 0);
}

TEST_F(CvarTest, NCCL_IB_USE_INLINE_value_1) {
  testNumValue<int64_t>("NCCL_IB_USE_INLINE", 9999);
  EXPECT_EQ(NCCL_IB_USE_INLINE, 9999);
}

TEST_F(CvarTest, NCCL_IB_USE_INLINE_value_2) {
  testNumValue<int64_t>("NCCL_IB_USE_INLINE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IB_USE_INLINE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IB_USE_INLINE_value_3) {
  testNumValue<int64_t>("NCCL_IB_USE_INLINE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IB_USE_INLINE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IGNORE_CPU_AFFINITY_value_0) {
  testNumValue<int64_t>("NCCL_IGNORE_CPU_AFFINITY", 0);
  EXPECT_EQ(NCCL_IGNORE_CPU_AFFINITY, 0);
}

TEST_F(CvarTest, NCCL_IGNORE_CPU_AFFINITY_value_1) {
  testNumValue<int64_t>("NCCL_IGNORE_CPU_AFFINITY", 9999);
  EXPECT_EQ(NCCL_IGNORE_CPU_AFFINITY, 9999);
}

TEST_F(CvarTest, NCCL_IGNORE_CPU_AFFINITY_value_2) {
  testNumValue<int64_t>("NCCL_IGNORE_CPU_AFFINITY", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IGNORE_CPU_AFFINITY, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IGNORE_CPU_AFFINITY_value_3) {
  testNumValue<int64_t>("NCCL_IGNORE_CPU_AFFINITY", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IGNORE_CPU_AFFINITY, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_IGNORE_DISABLED_P2P_value_0) {
  testNumValue<int64_t>("NCCL_IGNORE_DISABLED_P2P", 0);
  EXPECT_EQ(NCCL_IGNORE_DISABLED_P2P, 0);
}

TEST_F(CvarTest, NCCL_IGNORE_DISABLED_P2P_value_1) {
  testNumValue<int64_t>("NCCL_IGNORE_DISABLED_P2P", 9999);
  EXPECT_EQ(NCCL_IGNORE_DISABLED_P2P, 9999);
}

TEST_F(CvarTest, NCCL_IGNORE_DISABLED_P2P_value_2) {
  testNumValue<int64_t>("NCCL_IGNORE_DISABLED_P2P", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_IGNORE_DISABLED_P2P, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_IGNORE_DISABLED_P2P_value_3) {
  testNumValue<int64_t>("NCCL_IGNORE_DISABLED_P2P", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_IGNORE_DISABLED_P2P, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_L1_SHARED_MEMORY_CARVEOUT_value_0) {
  testNumValue<int>("NCCL_L1_SHARED_MEMORY_CARVEOUT", 0);
  EXPECT_EQ(NCCL_L1_SHARED_MEMORY_CARVEOUT, 0);
}

TEST_F(CvarTest, NCCL_L1_SHARED_MEMORY_CARVEOUT_value_1) {
  testNumValue<int>("NCCL_L1_SHARED_MEMORY_CARVEOUT", 9999);
  EXPECT_EQ(NCCL_L1_SHARED_MEMORY_CARVEOUT, 9999);
}

TEST_F(CvarTest, NCCL_L1_SHARED_MEMORY_CARVEOUT_value_2) {
  testNumValue<int>("NCCL_L1_SHARED_MEMORY_CARVEOUT", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_L1_SHARED_MEMORY_CARVEOUT, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_L1_SHARED_MEMORY_CARVEOUT_value_3) {
  testNumValue<int>("NCCL_L1_SHARED_MEMORY_CARVEOUT", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_L1_SHARED_MEMORY_CARVEOUT, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_LAUNCH_MODE_value_0) {
  setenv("NCCL_LAUNCH_MODE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_LAUNCH_MODE, "val1");
}

TEST_F(CvarTest, NCCL_LAUNCH_MODE_value_1) {
  setenv("NCCL_LAUNCH_MODE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_LAUNCH_MODE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_LL128_BUFFSIZE_value_0) {
  testNumValue<int64_t>("NCCL_LL128_BUFFSIZE", 0);
  EXPECT_EQ(NCCL_LL128_BUFFSIZE, 0);
}

TEST_F(CvarTest, NCCL_LL128_BUFFSIZE_value_1) {
  testNumValue<int64_t>("NCCL_LL128_BUFFSIZE", 9999);
  EXPECT_EQ(NCCL_LL128_BUFFSIZE, 9999);
}

TEST_F(CvarTest, NCCL_LL128_BUFFSIZE_value_2) {
  testNumValue<int64_t>("NCCL_LL128_BUFFSIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_LL128_BUFFSIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_LL128_BUFFSIZE_value_3) {
  testNumValue<int64_t>("NCCL_LL128_BUFFSIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_LL128_BUFFSIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_LL128_BUFFSIZE_default_value) {
  testDefaultValue("NCCL_LL128_BUFFSIZE");
  EXPECT_EQ(NCCL_LL128_BUFFSIZE, -2);
}

TEST_F(CvarTest, NCCL_LL128_NTHREADS_value_0) {
  testNumValue<int64_t>("NCCL_LL128_NTHREADS", 0);
  EXPECT_EQ(NCCL_LL128_NTHREADS, 0);
}

TEST_F(CvarTest, NCCL_LL128_NTHREADS_value_1) {
  testNumValue<int64_t>("NCCL_LL128_NTHREADS", 9999);
  EXPECT_EQ(NCCL_LL128_NTHREADS, 9999);
}

TEST_F(CvarTest, NCCL_LL128_NTHREADS_value_2) {
  testNumValue<int64_t>("NCCL_LL128_NTHREADS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_LL128_NTHREADS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_LL128_NTHREADS_value_3) {
  testNumValue<int64_t>("NCCL_LL128_NTHREADS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_LL128_NTHREADS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_LL128_NTHREADS_default_value) {
  testDefaultValue("NCCL_LL128_NTHREADS");
  EXPECT_EQ(NCCL_LL128_NTHREADS, -2);
}

TEST_F(CvarTest, NCCL_LL_BUFFSIZE_value_0) {
  testNumValue<int64_t>("NCCL_LL_BUFFSIZE", 0);
  EXPECT_EQ(NCCL_LL_BUFFSIZE, 0);
}

TEST_F(CvarTest, NCCL_LL_BUFFSIZE_value_1) {
  testNumValue<int64_t>("NCCL_LL_BUFFSIZE", 9999);
  EXPECT_EQ(NCCL_LL_BUFFSIZE, 9999);
}

TEST_F(CvarTest, NCCL_LL_BUFFSIZE_value_2) {
  testNumValue<int64_t>("NCCL_LL_BUFFSIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_LL_BUFFSIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_LL_BUFFSIZE_value_3) {
  testNumValue<int64_t>("NCCL_LL_BUFFSIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_LL_BUFFSIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_LL_BUFFSIZE_default_value) {
  testDefaultValue("NCCL_LL_BUFFSIZE");
  EXPECT_EQ(NCCL_LL_BUFFSIZE, -2);
}

TEST_F(CvarTest, NCCL_LOCAL_REGISTER_value_0) {
  testNumValue<int64_t>("NCCL_LOCAL_REGISTER", 0);
  EXPECT_EQ(NCCL_LOCAL_REGISTER, 0);
}

TEST_F(CvarTest, NCCL_LOCAL_REGISTER_value_1) {
  testNumValue<int64_t>("NCCL_LOCAL_REGISTER", 9999);
  EXPECT_EQ(NCCL_LOCAL_REGISTER, 9999);
}

TEST_F(CvarTest, NCCL_LOCAL_REGISTER_value_2) {
  testNumValue<int64_t>("NCCL_LOCAL_REGISTER", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_LOCAL_REGISTER, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_LOCAL_REGISTER_value_3) {
  testNumValue<int64_t>("NCCL_LOCAL_REGISTER", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_LOCAL_REGISTER, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_LOCAL_REGISTER_default_value) {
  testDefaultValue("NCCL_LOCAL_REGISTER");
  EXPECT_EQ(NCCL_LOCAL_REGISTER, 1);
}

TEST_F(CvarTest, NCCL_MAX_CTAS_value_0) {
  testNumValue<int>("NCCL_MAX_CTAS", 0);
  EXPECT_EQ(NCCL_MAX_CTAS, 0);
}

TEST_F(CvarTest, NCCL_MAX_CTAS_value_1) {
  testNumValue<int>("NCCL_MAX_CTAS", 9999);
  EXPECT_EQ(NCCL_MAX_CTAS, 9999);
}

TEST_F(CvarTest, NCCL_MAX_CTAS_value_2) {
  testNumValue<int>("NCCL_MAX_CTAS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_MAX_CTAS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_MAX_CTAS_value_3) {
  testNumValue<int>("NCCL_MAX_CTAS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_MAX_CTAS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_MAX_CTAS_default_value) {
  testDefaultValue("NCCL_MAX_CTAS");
  EXPECT_EQ(NCCL_MAX_CTAS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_value_0) {
  testNumValue<int64_t>("NCCL_MAX_NCHANNELS", 0);
  EXPECT_EQ(NCCL_MAX_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_value_1) {
  testNumValue<int64_t>("NCCL_MAX_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_MAX_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_value_2) {
  testNumValue<int64_t>("NCCL_MAX_NCHANNELS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MAX_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_value_3) {
  testNumValue<int64_t>("NCCL_MAX_NCHANNELS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MAX_NCHANNELS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MAX_NCHANNELS_default_value) {
  testDefaultValue("NCCL_MAX_NCHANNELS");
  EXPECT_EQ(NCCL_MAX_NCHANNELS, -2);
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_value_0) {
  testNumValue<int64_t>("NCCL_MAX_NRINGS", 0);
  EXPECT_EQ(NCCL_MAX_NRINGS, 0);
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_value_1) {
  testNumValue<int64_t>("NCCL_MAX_NRINGS", 9999);
  EXPECT_EQ(NCCL_MAX_NRINGS, 9999);
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_value_2) {
  testNumValue<int64_t>("NCCL_MAX_NRINGS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MAX_NRINGS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_value_3) {
  testNumValue<int64_t>("NCCL_MAX_NRINGS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MAX_NRINGS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MAX_NRINGS_default_value) {
  testDefaultValue("NCCL_MAX_NRINGS");
  EXPECT_EQ(NCCL_MAX_NRINGS, -2);
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_value_0) {
  testNumValue<int64_t>("NCCL_MAX_P2P_NCHANNELS", 0);
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_value_1) {
  testNumValue<int64_t>("NCCL_MAX_P2P_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_value_2) {
  testNumValue<int64_t>("NCCL_MAX_P2P_NCHANNELS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_value_3) {
  testNumValue<int64_t>("NCCL_MAX_P2P_NCHANNELS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MAX_P2P_NCHANNELS_default_value) {
  testDefaultValue("NCCL_MAX_P2P_NCHANNELS");
  EXPECT_EQ(NCCL_MAX_P2P_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MEM_SYNC_DOMAIN_single_choice_0) {
  setenv("NCCL_MEM_SYNC_DOMAIN", "local", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_MEM_SYNC_DOMAIN, NCCL_MEM_SYNC_DOMAIN::local);
}

TEST_F(CvarTest, NCCL_MEM_SYNC_DOMAIN_single_choice_1) {
  setenv("NCCL_MEM_SYNC_DOMAIN", "remote", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_MEM_SYNC_DOMAIN, NCCL_MEM_SYNC_DOMAIN::remote);
}

TEST_F(CvarTest, NCCL_MEM_SYNC_DOMAIN_default_choice) {
  testDefaultValue("NCCL_MEM_SYNC_DOMAIN");
  EXPECT_EQ(NCCL_MEM_SYNC_DOMAIN, NCCL_MEM_SYNC_DOMAIN::remote);
}

TEST_F(CvarTest, NCCL_MEM_SYNC_DOMAIN_warn_unknown_val) {
  setenv("NCCL_MEM_SYNC_DOMAIN", "dummy", 1);
  testWarn("NCCL_MEM_SYNC_DOMAIN", "Unknown value");
}

TEST_F(CvarTest, NCCL_MIN_CTAS_value_0) {
  testNumValue<int>("NCCL_MIN_CTAS", 0);
  EXPECT_EQ(NCCL_MIN_CTAS, 0);
}

TEST_F(CvarTest, NCCL_MIN_CTAS_value_1) {
  testNumValue<int>("NCCL_MIN_CTAS", 9999);
  EXPECT_EQ(NCCL_MIN_CTAS, 9999);
}

TEST_F(CvarTest, NCCL_MIN_CTAS_value_2) {
  testNumValue<int>("NCCL_MIN_CTAS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_MIN_CTAS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_MIN_CTAS_value_3) {
  testNumValue<int>("NCCL_MIN_CTAS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_MIN_CTAS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_MIN_CTAS_default_value) {
  testDefaultValue("NCCL_MIN_CTAS");
  EXPECT_EQ(NCCL_MIN_CTAS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_value_0) {
  testNumValue<int64_t>("NCCL_MIN_NCHANNELS", 0);
  EXPECT_EQ(NCCL_MIN_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_value_1) {
  testNumValue<int64_t>("NCCL_MIN_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_MIN_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_value_2) {
  testNumValue<int64_t>("NCCL_MIN_NCHANNELS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MIN_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_value_3) {
  testNumValue<int64_t>("NCCL_MIN_NCHANNELS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MIN_NCHANNELS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MIN_NCHANNELS_default_value) {
  testDefaultValue("NCCL_MIN_NCHANNELS");
  EXPECT_EQ(NCCL_MIN_NCHANNELS, -2);
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_value_0) {
  testNumValue<int64_t>("NCCL_MIN_NRINGS", 0);
  EXPECT_EQ(NCCL_MIN_NRINGS, 0);
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_value_1) {
  testNumValue<int64_t>("NCCL_MIN_NRINGS", 9999);
  EXPECT_EQ(NCCL_MIN_NRINGS, 9999);
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_value_2) {
  testNumValue<int64_t>("NCCL_MIN_NRINGS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MIN_NRINGS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_value_3) {
  testNumValue<int64_t>("NCCL_MIN_NRINGS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MIN_NRINGS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MIN_NRINGS_default_value) {
  testDefaultValue("NCCL_MIN_NRINGS");
  EXPECT_EQ(NCCL_MIN_NRINGS, -2);
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_value_0) {
  testNumValue<int64_t>("NCCL_MIN_P2P_NCHANNELS", 0);
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_value_1) {
  testNumValue<int64_t>("NCCL_MIN_P2P_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_value_2) {
  testNumValue<int64_t>("NCCL_MIN_P2P_NCHANNELS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_value_3) {
  testNumValue<int64_t>("NCCL_MIN_P2P_NCHANNELS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_MIN_P2P_NCHANNELS_default_value) {
  testDefaultValue("NCCL_MIN_P2P_NCHANNELS");
  EXPECT_EQ(NCCL_MIN_P2P_NCHANNELS, 1);
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_value_0) {
  testNumValue<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", 0);
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, 0);
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_value_1) {
  testNumValue<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", 9999);
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, 9999);
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_value_2) {
  testNumValue<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_value_3) {
  testNumValue<int64_t>("NCCL_NCHANNELS_PER_NET_PEER", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NCHANNELS_PER_NET_PEER_default_value) {
  testDefaultValue("NCCL_NCHANNELS_PER_NET_PEER");
  EXPECT_EQ(NCCL_NCHANNELS_PER_NET_PEER, 2);
}

TEST_F(CvarTest, NCCL_NETWORK_value_0) {
  setenv("NCCL_NET", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_NETWORK, "val1");
}

TEST_F(CvarTest, NCCL_NETWORK_value_1) {
  setenv("NCCL_NET", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_NETWORK, "val2_with_space");
}

TEST_F(CvarTest, NCCL_NET_DISABLE_INTRA_value_0) {
  testNumValue<int64_t>("NCCL_NET_DISABLE_INTRA", 0);
  EXPECT_EQ(NCCL_NET_DISABLE_INTRA, 0);
}

TEST_F(CvarTest, NCCL_NET_DISABLE_INTRA_value_1) {
  testNumValue<int64_t>("NCCL_NET_DISABLE_INTRA", 9999);
  EXPECT_EQ(NCCL_NET_DISABLE_INTRA, 9999);
}

TEST_F(CvarTest, NCCL_NET_DISABLE_INTRA_value_2) {
  testNumValue<int64_t>("NCCL_NET_DISABLE_INTRA", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NET_DISABLE_INTRA, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NET_DISABLE_INTRA_value_3) {
  testNumValue<int64_t>("NCCL_NET_DISABLE_INTRA", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NET_DISABLE_INTRA, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_value_0) {
  testNumValue<int64_t>("NCCL_NET_FORCE_FLUSH", 0);
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, 0);
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_value_1) {
  testNumValue<int64_t>("NCCL_NET_FORCE_FLUSH", 9999);
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, 9999);
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_value_2) {
  testNumValue<int64_t>("NCCL_NET_FORCE_FLUSH", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NET_FORCE_FLUSH_value_3) {
  testNumValue<int64_t>("NCCL_NET_FORCE_FLUSH", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NET_FORCE_FLUSH, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NET_GDR_LEVEL_value_0) {
  setenv("NCCL_NET_GDR_LEVEL", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_NET_GDR_LEVEL, "val1");
}

TEST_F(CvarTest, NCCL_NET_GDR_LEVEL_value_1) {
  setenv("NCCL_NET_GDR_LEVEL", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_NET_GDR_LEVEL, "val2_with_space");
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_value_0) {
  testNumValue<int64_t>("NCCL_NET_GDR_READ", 0);
  EXPECT_EQ(NCCL_NET_GDR_READ, 0);
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_value_1) {
  testNumValue<int64_t>("NCCL_NET_GDR_READ", 9999);
  EXPECT_EQ(NCCL_NET_GDR_READ, 9999);
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_value_2) {
  testNumValue<int64_t>("NCCL_NET_GDR_READ", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NET_GDR_READ, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_value_3) {
  testNumValue<int64_t>("NCCL_NET_GDR_READ", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NET_GDR_READ, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NET_GDR_READ_default_value) {
  testDefaultValue("NCCL_NET_GDR_READ");
  EXPECT_EQ(NCCL_NET_GDR_READ, -2);
}

TEST_F(CvarTest, NCCL_NET_OVERHEAD_value_0) {
  testNumValue<int64_t>("NCCL_NET_OVERHEAD", 0);
  EXPECT_EQ(NCCL_NET_OVERHEAD, 0);
}

TEST_F(CvarTest, NCCL_NET_OVERHEAD_value_1) {
  testNumValue<int64_t>("NCCL_NET_OVERHEAD", 9999);
  EXPECT_EQ(NCCL_NET_OVERHEAD, 9999);
}

TEST_F(CvarTest, NCCL_NET_OVERHEAD_value_2) {
  testNumValue<int64_t>("NCCL_NET_OVERHEAD", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NET_OVERHEAD, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NET_OVERHEAD_value_3) {
  testNumValue<int64_t>("NCCL_NET_OVERHEAD", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NET_OVERHEAD, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NET_OVERHEAD_default_value) {
  testDefaultValue("NCCL_NET_OVERHEAD");
  EXPECT_EQ(NCCL_NET_OVERHEAD, -2);
}

TEST_F(CvarTest, NCCL_NET_PLUGIN_value_0) {
  setenv("NCCL_NET_PLUGIN", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_NET_PLUGIN, "val1");
}

TEST_F(CvarTest, NCCL_NET_PLUGIN_value_1) {
  setenv("NCCL_NET_PLUGIN", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_NET_PLUGIN, "val2_with_space");
}

TEST_F(CvarTest, NCCL_NET_PLUGIN_default_value) {
  testDefaultValue("NCCL_NET_PLUGIN");
  EXPECT_EQ(NCCL_NET_PLUGIN, "libnccl-net.so");
}

TEST_F(CvarTest, NCCL_NET_SHARED_BUFFERS_value_0) {
  testNumValue<int64_t>("NCCL_NET_SHARED_BUFFERS", 0);
  EXPECT_EQ(NCCL_NET_SHARED_BUFFERS, 0);
}

TEST_F(CvarTest, NCCL_NET_SHARED_BUFFERS_value_1) {
  testNumValue<int64_t>("NCCL_NET_SHARED_BUFFERS", 9999);
  EXPECT_EQ(NCCL_NET_SHARED_BUFFERS, 9999);
}

TEST_F(CvarTest, NCCL_NET_SHARED_BUFFERS_value_2) {
  testNumValue<int64_t>("NCCL_NET_SHARED_BUFFERS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NET_SHARED_BUFFERS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NET_SHARED_BUFFERS_value_3) {
  testNumValue<int64_t>("NCCL_NET_SHARED_BUFFERS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NET_SHARED_BUFFERS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NET_SHARED_BUFFERS_default_value) {
  testDefaultValue("NCCL_NET_SHARED_BUFFERS");
  EXPECT_EQ(NCCL_NET_SHARED_BUFFERS, -2);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_value_y0) {
  setenv("NCCL_NET_SHARED_COMMS", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_value_y1) {
  setenv("NCCL_NET_SHARED_COMMS", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_value_y2) {
  setenv("NCCL_NET_SHARED_COMMS", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_value_y3) {
  setenv("NCCL_NET_SHARED_COMMS", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_value_n0) {
  setenv("NCCL_NET_SHARED_COMMS", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_value_n1) {
  setenv("NCCL_NET_SHARED_COMMS", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_value_n2) {
  setenv("NCCL_NET_SHARED_COMMS", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_value_n3) {
  setenv("NCCL_NET_SHARED_COMMS", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_default_value) {
  testDefaultValue("NCCL_NET_SHARED_COMMS");
  EXPECT_TRUE(NCCL_NET_SHARED_COMMS);
}

TEST_F(CvarTest, NCCL_NET_SHARED_COMMS_warn_unknown_val) {
  setenv("NCCL_NET_SHARED_COMMS", "dummy", 1);
  testWarn("NCCL_NET_SHARED_COMMS", "Unknown value");
}

TEST_F(CvarTest, NCCL_NSOCKS_PERTHREAD_value_0) {
  testNumValue<int>("NCCL_NSOCKS_PERTHREAD", 0);
  EXPECT_EQ(NCCL_NSOCKS_PERTHREAD, 0);
}

TEST_F(CvarTest, NCCL_NSOCKS_PERTHREAD_value_1) {
  testNumValue<int>("NCCL_NSOCKS_PERTHREAD", 9999);
  EXPECT_EQ(NCCL_NSOCKS_PERTHREAD, 9999);
}

TEST_F(CvarTest, NCCL_NSOCKS_PERTHREAD_value_2) {
  testNumValue<int>("NCCL_NSOCKS_PERTHREAD", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_NSOCKS_PERTHREAD, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_NSOCKS_PERTHREAD_value_3) {
  testNumValue<int>("NCCL_NSOCKS_PERTHREAD", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_NSOCKS_PERTHREAD, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_NSOCKS_PERTHREAD_default_value) {
  testDefaultValue("NCCL_NSOCKS_PERTHREAD");
  EXPECT_EQ(NCCL_NSOCKS_PERTHREAD, -2);
}

TEST_F(CvarTest, NCCL_NTHREADS_value_0) {
  testNumValue<int64_t>("NCCL_NTHREADS", 0);
  EXPECT_EQ(NCCL_NTHREADS, 0);
}

TEST_F(CvarTest, NCCL_NTHREADS_value_1) {
  testNumValue<int64_t>("NCCL_NTHREADS", 9999);
  EXPECT_EQ(NCCL_NTHREADS, 9999);
}

TEST_F(CvarTest, NCCL_NTHREADS_value_2) {
  testNumValue<int64_t>("NCCL_NTHREADS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NTHREADS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NTHREADS_value_3) {
  testNumValue<int64_t>("NCCL_NTHREADS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NTHREADS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NTHREADS_default_value) {
  testDefaultValue("NCCL_NTHREADS");
  EXPECT_EQ(NCCL_NTHREADS, -2);
}

TEST_F(CvarTest, NCCL_NVB_DISABLE_value_0) {
  testNumValue<int64_t>("NCCL_NVB_DISABLE", 0);
  EXPECT_EQ(NCCL_NVB_DISABLE, 0);
}

TEST_F(CvarTest, NCCL_NVB_DISABLE_value_1) {
  testNumValue<int64_t>("NCCL_NVB_DISABLE", 9999);
  EXPECT_EQ(NCCL_NVB_DISABLE, 9999);
}

TEST_F(CvarTest, NCCL_NVB_DISABLE_value_2) {
  testNumValue<int64_t>("NCCL_NVB_DISABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NVB_DISABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NVB_DISABLE_value_3) {
  testNumValue<int64_t>("NCCL_NVB_DISABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NVB_DISABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NVB_PRECONNECT_value_0) {
  testNumValue<int64_t>("NCCL_NVB_PRECONNECT", 0);
  EXPECT_EQ(NCCL_NVB_PRECONNECT, 0);
}

TEST_F(CvarTest, NCCL_NVB_PRECONNECT_value_1) {
  testNumValue<int64_t>("NCCL_NVB_PRECONNECT", 9999);
  EXPECT_EQ(NCCL_NVB_PRECONNECT, 9999);
}

TEST_F(CvarTest, NCCL_NVB_PRECONNECT_value_2) {
  testNumValue<int64_t>("NCCL_NVB_PRECONNECT", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NVB_PRECONNECT, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NVB_PRECONNECT_value_3) {
  testNumValue<int64_t>("NCCL_NVB_PRECONNECT", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NVB_PRECONNECT, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NVB_PRECONNECT_default_value) {
  testDefaultValue("NCCL_NVB_PRECONNECT");
  EXPECT_EQ(NCCL_NVB_PRECONNECT, 1);
}

TEST_F(CvarTest, NCCL_NVLS_ENABLE_value_0) {
  testNumValue<int64_t>("NCCL_NVLS_ENABLE", 0);
  EXPECT_EQ(NCCL_NVLS_ENABLE, 0);
}

TEST_F(CvarTest, NCCL_NVLS_ENABLE_value_1) {
  testNumValue<int64_t>("NCCL_NVLS_ENABLE", 9999);
  EXPECT_EQ(NCCL_NVLS_ENABLE, 9999);
}

TEST_F(CvarTest, NCCL_NVLS_ENABLE_value_2) {
  testNumValue<int64_t>("NCCL_NVLS_ENABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_NVLS_ENABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_NVLS_ENABLE_value_3) {
  testNumValue<int64_t>("NCCL_NVLS_ENABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_NVLS_ENABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_NVLS_ENABLE_default_value) {
  testDefaultValue("NCCL_NVLS_ENABLE");
  EXPECT_EQ(NCCL_NVLS_ENABLE, 2);
}

TEST_F(CvarTest, NCCL_NVLS_NCHANNELS_value_0) {
  testNumValue<int>("NCCL_NVLS_NCHANNELS", 0);
  EXPECT_EQ(NCCL_NVLS_NCHANNELS, 0);
}

TEST_F(CvarTest, NCCL_NVLS_NCHANNELS_value_1) {
  testNumValue<int>("NCCL_NVLS_NCHANNELS", 9999);
  EXPECT_EQ(NCCL_NVLS_NCHANNELS, 9999);
}

TEST_F(CvarTest, NCCL_NVLS_NCHANNELS_value_2) {
  testNumValue<int>("NCCL_NVLS_NCHANNELS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_NVLS_NCHANNELS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_NVLS_NCHANNELS_value_3) {
  testNumValue<int>("NCCL_NVLS_NCHANNELS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_NVLS_NCHANNELS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_NVLS_NCHANNELS_default_value) {
  testDefaultValue("NCCL_NVLS_NCHANNELS");
  EXPECT_EQ(NCCL_NVLS_NCHANNELS, 16);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_value_y0) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_P2P_DIRECT_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_value_y1) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_P2P_DIRECT_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_value_y2) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_P2P_DIRECT_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_value_y3) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_P2P_DIRECT_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_value_n0) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_P2P_DIRECT_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_value_n1) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_P2P_DIRECT_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_value_n2) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_P2P_DIRECT_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_value_n3) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_P2P_DIRECT_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DIRECT_DISABLE_warn_unknown_val) {
  setenv("NCCL_P2P_DIRECT_DISABLE", "dummy", 1);
  testWarn("NCCL_P2P_DIRECT_DISABLE", "Unknown value");
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_value_y0) {
  setenv("NCCL_P2P_DISABLE", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_P2P_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_value_y1) {
  setenv("NCCL_P2P_DISABLE", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_P2P_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_value_y2) {
  setenv("NCCL_P2P_DISABLE", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_P2P_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_value_y3) {
  setenv("NCCL_P2P_DISABLE", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_P2P_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_value_n0) {
  setenv("NCCL_P2P_DISABLE", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_P2P_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_value_n1) {
  setenv("NCCL_P2P_DISABLE", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_P2P_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_value_n2) {
  setenv("NCCL_P2P_DISABLE", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_P2P_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_value_n3) {
  setenv("NCCL_P2P_DISABLE", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_P2P_DISABLE);
}

TEST_F(CvarTest, NCCL_P2P_DISABLE_warn_unknown_val) {
  setenv("NCCL_P2P_DISABLE", "dummy", 1);
  testWarn("NCCL_P2P_DISABLE", "Unknown value");
}

TEST_F(CvarTest, NCCL_P2P_LEVEL_value_0) {
  setenv("NCCL_P2P_LEVEL", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_P2P_LEVEL, "val1");
}

TEST_F(CvarTest, NCCL_P2P_LEVEL_value_1) {
  setenv("NCCL_P2P_LEVEL", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_P2P_LEVEL, "val2_with_space");
}

TEST_F(CvarTest, NCCL_P2P_LL_THRESHOLD_value_0) {
  testNumValue<int64_t>("NCCL_P2P_LL_THRESHOLD", 0);
  EXPECT_EQ(NCCL_P2P_LL_THRESHOLD, 0);
}

TEST_F(CvarTest, NCCL_P2P_LL_THRESHOLD_value_1) {
  testNumValue<int64_t>("NCCL_P2P_LL_THRESHOLD", 9999);
  EXPECT_EQ(NCCL_P2P_LL_THRESHOLD, 9999);
}

TEST_F(CvarTest, NCCL_P2P_LL_THRESHOLD_value_2) {
  testNumValue<int64_t>("NCCL_P2P_LL_THRESHOLD", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_P2P_LL_THRESHOLD, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_P2P_LL_THRESHOLD_value_3) {
  testNumValue<int64_t>("NCCL_P2P_LL_THRESHOLD", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_P2P_LL_THRESHOLD, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_P2P_LL_THRESHOLD_default_value) {
  testDefaultValue("NCCL_P2P_LL_THRESHOLD");
  EXPECT_EQ(NCCL_P2P_LL_THRESHOLD, 16384);
}

TEST_F(CvarTest, NCCL_P2P_NET_CHUNKSIZE_value_0) {
  testNumValue<int64_t>("NCCL_P2P_NET_CHUNKSIZE", 0);
  EXPECT_EQ(NCCL_P2P_NET_CHUNKSIZE, 0);
}

TEST_F(CvarTest, NCCL_P2P_NET_CHUNKSIZE_value_1) {
  testNumValue<int64_t>("NCCL_P2P_NET_CHUNKSIZE", 9999);
  EXPECT_EQ(NCCL_P2P_NET_CHUNKSIZE, 9999);
}

TEST_F(CvarTest, NCCL_P2P_NET_CHUNKSIZE_value_2) {
  testNumValue<int64_t>("NCCL_P2P_NET_CHUNKSIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_P2P_NET_CHUNKSIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_P2P_NET_CHUNKSIZE_value_3) {
  testNumValue<int64_t>("NCCL_P2P_NET_CHUNKSIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_P2P_NET_CHUNKSIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_P2P_NET_CHUNKSIZE_default_value) {
  testDefaultValue("NCCL_P2P_NET_CHUNKSIZE");
  EXPECT_EQ(NCCL_P2P_NET_CHUNKSIZE, 131072);
}

TEST_F(CvarTest, NCCL_P2P_NVL_CHUNKSIZE_value_0) {
  testNumValue<int64_t>("NCCL_P2P_NVL_CHUNKSIZE", 0);
  EXPECT_EQ(NCCL_P2P_NVL_CHUNKSIZE, 0);
}

TEST_F(CvarTest, NCCL_P2P_NVL_CHUNKSIZE_value_1) {
  testNumValue<int64_t>("NCCL_P2P_NVL_CHUNKSIZE", 9999);
  EXPECT_EQ(NCCL_P2P_NVL_CHUNKSIZE, 9999);
}

TEST_F(CvarTest, NCCL_P2P_NVL_CHUNKSIZE_value_2) {
  testNumValue<int64_t>("NCCL_P2P_NVL_CHUNKSIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_P2P_NVL_CHUNKSIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_P2P_NVL_CHUNKSIZE_value_3) {
  testNumValue<int64_t>("NCCL_P2P_NVL_CHUNKSIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_P2P_NVL_CHUNKSIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_P2P_NVL_CHUNKSIZE_default_value) {
  testDefaultValue("NCCL_P2P_NVL_CHUNKSIZE");
  EXPECT_EQ(NCCL_P2P_NVL_CHUNKSIZE, 524288);
}

TEST_F(CvarTest, NCCL_P2P_PCI_CHUNKSIZE_value_0) {
  testNumValue<int64_t>("NCCL_P2P_PCI_CHUNKSIZE", 0);
  EXPECT_EQ(NCCL_P2P_PCI_CHUNKSIZE, 0);
}

TEST_F(CvarTest, NCCL_P2P_PCI_CHUNKSIZE_value_1) {
  testNumValue<int64_t>("NCCL_P2P_PCI_CHUNKSIZE", 9999);
  EXPECT_EQ(NCCL_P2P_PCI_CHUNKSIZE, 9999);
}

TEST_F(CvarTest, NCCL_P2P_PCI_CHUNKSIZE_value_2) {
  testNumValue<int64_t>("NCCL_P2P_PCI_CHUNKSIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_P2P_PCI_CHUNKSIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_P2P_PCI_CHUNKSIZE_value_3) {
  testNumValue<int64_t>("NCCL_P2P_PCI_CHUNKSIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_P2P_PCI_CHUNKSIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_P2P_PCI_CHUNKSIZE_default_value) {
  testDefaultValue("NCCL_P2P_PCI_CHUNKSIZE");
  EXPECT_EQ(NCCL_P2P_PCI_CHUNKSIZE, 131072);
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_value_0) {
  testNumValue<int64_t>("NCCL_P2P_PXN_LEVEL", 0);
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, 0);
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_value_1) {
  testNumValue<int64_t>("NCCL_P2P_PXN_LEVEL", 9999);
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, 9999);
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_value_2) {
  testNumValue<int64_t>("NCCL_P2P_PXN_LEVEL", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_value_3) {
  testNumValue<int64_t>("NCCL_P2P_PXN_LEVEL", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_P2P_PXN_LEVEL_default_value) {
  testDefaultValue("NCCL_P2P_PXN_LEVEL");
  EXPECT_EQ(NCCL_P2P_PXN_LEVEL, 2);
}

TEST_F(CvarTest, NCCL_P2P_READ_ENABLE_value_0) {
  testNumValue<int64_t>("NCCL_P2P_READ_ENABLE", 0);
  EXPECT_EQ(NCCL_P2P_READ_ENABLE, 0);
}

TEST_F(CvarTest, NCCL_P2P_READ_ENABLE_value_1) {
  testNumValue<int64_t>("NCCL_P2P_READ_ENABLE", 9999);
  EXPECT_EQ(NCCL_P2P_READ_ENABLE, 9999);
}

TEST_F(CvarTest, NCCL_P2P_READ_ENABLE_value_2) {
  testNumValue<int64_t>("NCCL_P2P_READ_ENABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_P2P_READ_ENABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_P2P_READ_ENABLE_value_3) {
  testNumValue<int64_t>("NCCL_P2P_READ_ENABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_P2P_READ_ENABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_P2P_READ_ENABLE_default_value) {
  testDefaultValue("NCCL_P2P_READ_ENABLE");
  EXPECT_EQ(NCCL_P2P_READ_ENABLE, -2);
}

TEST_F(CvarTest, NCCL_P2P_USE_CUDA_MEMCPY_value_0) {
  testNumValue<int64_t>("NCCL_P2P_USE_CUDA_MEMCPY", 0);
  EXPECT_EQ(NCCL_P2P_USE_CUDA_MEMCPY, 0);
}

TEST_F(CvarTest, NCCL_P2P_USE_CUDA_MEMCPY_value_1) {
  testNumValue<int64_t>("NCCL_P2P_USE_CUDA_MEMCPY", 9999);
  EXPECT_EQ(NCCL_P2P_USE_CUDA_MEMCPY, 9999);
}

TEST_F(CvarTest, NCCL_P2P_USE_CUDA_MEMCPY_value_2) {
  testNumValue<int64_t>("NCCL_P2P_USE_CUDA_MEMCPY", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_P2P_USE_CUDA_MEMCPY, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_P2P_USE_CUDA_MEMCPY_value_3) {
  testNumValue<int64_t>("NCCL_P2P_USE_CUDA_MEMCPY", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_P2P_USE_CUDA_MEMCPY, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_PROGRESS_APPENDOP_FREQ_value_0) {
  testNumValue<int64_t>("NCCL_PROGRESS_APPENDOP_FREQ", 0);
  EXPECT_EQ(NCCL_PROGRESS_APPENDOP_FREQ, 0);
}

TEST_F(CvarTest, NCCL_PROGRESS_APPENDOP_FREQ_value_1) {
  testNumValue<int64_t>("NCCL_PROGRESS_APPENDOP_FREQ", 9999);
  EXPECT_EQ(NCCL_PROGRESS_APPENDOP_FREQ, 9999);
}

TEST_F(CvarTest, NCCL_PROGRESS_APPENDOP_FREQ_value_2) {
  testNumValue<int64_t>("NCCL_PROGRESS_APPENDOP_FREQ", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_PROGRESS_APPENDOP_FREQ, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_PROGRESS_APPENDOP_FREQ_value_3) {
  testNumValue<int64_t>("NCCL_PROGRESS_APPENDOP_FREQ", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_PROGRESS_APPENDOP_FREQ, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_PROGRESS_APPENDOP_FREQ_default_value) {
  testDefaultValue("NCCL_PROGRESS_APPENDOP_FREQ");
  EXPECT_EQ(NCCL_PROGRESS_APPENDOP_FREQ, 8);
}

TEST_F(CvarTest, NCCL_PROTO_value_0) {
  setenv("NCCL_PROTO", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_PROTO, "val1");
}

TEST_F(CvarTest, NCCL_PROTO_value_1) {
  setenv("NCCL_PROTO", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_PROTO, "val2_with_space");
}

TEST_F(CvarTest, NCCL_PROXY_APPEND_BATCH_SIZE_value_0) {
  testNumValue<int64_t>("NCCL_PROXY_APPEND_BATCH_SIZE", 0);
  EXPECT_EQ(NCCL_PROXY_APPEND_BATCH_SIZE, 0);
}

TEST_F(CvarTest, NCCL_PROXY_APPEND_BATCH_SIZE_value_1) {
  testNumValue<int64_t>("NCCL_PROXY_APPEND_BATCH_SIZE", 9999);
  EXPECT_EQ(NCCL_PROXY_APPEND_BATCH_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_PROXY_APPEND_BATCH_SIZE_value_2) {
  testNumValue<int64_t>("NCCL_PROXY_APPEND_BATCH_SIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_PROXY_APPEND_BATCH_SIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_PROXY_APPEND_BATCH_SIZE_value_3) {
  testNumValue<int64_t>("NCCL_PROXY_APPEND_BATCH_SIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_PROXY_APPEND_BATCH_SIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_PROXY_APPEND_BATCH_SIZE_default_value) {
  testDefaultValue("NCCL_PROXY_APPEND_BATCH_SIZE");
  EXPECT_EQ(NCCL_PROXY_APPEND_BATCH_SIZE, 16);
}

TEST_F(CvarTest, NCCL_PROXY_DUMP_SIGNAL_value_0) {
  testNumValue<int64_t>("NCCL_PROXY_DUMP_SIGNAL", 0);
  EXPECT_EQ(NCCL_PROXY_DUMP_SIGNAL, 0);
}

TEST_F(CvarTest, NCCL_PROXY_DUMP_SIGNAL_value_1) {
  testNumValue<int64_t>("NCCL_PROXY_DUMP_SIGNAL", 9999);
  EXPECT_EQ(NCCL_PROXY_DUMP_SIGNAL, 9999);
}

TEST_F(CvarTest, NCCL_PROXY_DUMP_SIGNAL_value_2) {
  testNumValue<int64_t>("NCCL_PROXY_DUMP_SIGNAL", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_PROXY_DUMP_SIGNAL, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_PROXY_DUMP_SIGNAL_value_3) {
  testNumValue<int64_t>("NCCL_PROXY_DUMP_SIGNAL", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_PROXY_DUMP_SIGNAL, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_PROXY_DUMP_SIGNAL_default_value) {
  testDefaultValue("NCCL_PROXY_DUMP_SIGNAL");
  EXPECT_EQ(NCCL_PROXY_DUMP_SIGNAL, -1);
}

TEST_F(CvarTest, NCCL_PROXY_PROFILE_value_0) {
  setenv("NCCL_PROXY_PROFILE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_PROXY_PROFILE, "val1");
}

TEST_F(CvarTest, NCCL_PROXY_PROFILE_value_1) {
  setenv("NCCL_PROXY_PROFILE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_PROXY_PROFILE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_PROXY_PROFILE_DIR_value_0) {
  setenv("NCCL_PROXY_PROFILE_DIR", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_PROXY_PROFILE_DIR, "val1");
}

TEST_F(CvarTest, NCCL_PROXY_PROFILE_DIR_value_1) {
  setenv("NCCL_PROXY_PROFILE_DIR", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_PROXY_PROFILE_DIR, "val2_with_space");
}

TEST_F(CvarTest, NCCL_PROXY_PROFILE_DIR_default_value) {
  testDefaultValue("NCCL_PROXY_PROFILE_DIR");
  EXPECT_EQ(NCCL_PROXY_PROFILE_DIR, "/tmp");
}

TEST_F(CvarTest, NCCL_PXN_DISABLE_value_0) {
  testNumValue<int64_t>("NCCL_PXN_DISABLE", 0);
  EXPECT_EQ(NCCL_PXN_DISABLE, 0);
}

TEST_F(CvarTest, NCCL_PXN_DISABLE_value_1) {
  testNumValue<int64_t>("NCCL_PXN_DISABLE", 9999);
  EXPECT_EQ(NCCL_PXN_DISABLE, 9999);
}

TEST_F(CvarTest, NCCL_PXN_DISABLE_value_2) {
  testNumValue<int64_t>("NCCL_PXN_DISABLE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_PXN_DISABLE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_PXN_DISABLE_value_3) {
  testNumValue<int64_t>("NCCL_PXN_DISABLE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_PXN_DISABLE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_REPORT_CONNECT_PROGRESS_value_0) {
  testNumValue<int64_t>("NCCL_REPORT_CONNECT_PROGRESS", 0);
  EXPECT_EQ(NCCL_REPORT_CONNECT_PROGRESS, 0);
}

TEST_F(CvarTest, NCCL_REPORT_CONNECT_PROGRESS_value_1) {
  testNumValue<int64_t>("NCCL_REPORT_CONNECT_PROGRESS", 9999);
  EXPECT_EQ(NCCL_REPORT_CONNECT_PROGRESS, 9999);
}

TEST_F(CvarTest, NCCL_REPORT_CONNECT_PROGRESS_value_2) {
  testNumValue<int64_t>("NCCL_REPORT_CONNECT_PROGRESS", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_REPORT_CONNECT_PROGRESS, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_REPORT_CONNECT_PROGRESS_value_3) {
  testNumValue<int64_t>("NCCL_REPORT_CONNECT_PROGRESS", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_REPORT_CONNECT_PROGRESS, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_SET_STACK_SIZE_value_0) {
  testNumValue<int64_t>("NCCL_SET_STACK_SIZE", 0);
  EXPECT_EQ(NCCL_SET_STACK_SIZE, 0);
}

TEST_F(CvarTest, NCCL_SET_STACK_SIZE_value_1) {
  testNumValue<int64_t>("NCCL_SET_STACK_SIZE", 9999);
  EXPECT_EQ(NCCL_SET_STACK_SIZE, 9999);
}

TEST_F(CvarTest, NCCL_SET_STACK_SIZE_value_2) {
  testNumValue<int64_t>("NCCL_SET_STACK_SIZE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_SET_STACK_SIZE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_SET_STACK_SIZE_value_3) {
  testNumValue<int64_t>("NCCL_SET_STACK_SIZE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_SET_STACK_SIZE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_SET_THREAD_NAME_value_0) {
  testNumValue<int64_t>("NCCL_SET_THREAD_NAME", 0);
  EXPECT_EQ(NCCL_SET_THREAD_NAME, 0);
}

TEST_F(CvarTest, NCCL_SET_THREAD_NAME_value_1) {
  testNumValue<int64_t>("NCCL_SET_THREAD_NAME", 9999);
  EXPECT_EQ(NCCL_SET_THREAD_NAME, 9999);
}

TEST_F(CvarTest, NCCL_SET_THREAD_NAME_value_2) {
  testNumValue<int64_t>("NCCL_SET_THREAD_NAME", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_SET_THREAD_NAME, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_SET_THREAD_NAME_value_3) {
  testNumValue<int64_t>("NCCL_SET_THREAD_NAME", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_SET_THREAD_NAME, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_value_y0) {
  setenv("NCCL_SHM_DISABLE", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_SHM_DISABLE);
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_value_y1) {
  setenv("NCCL_SHM_DISABLE", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_SHM_DISABLE);
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_value_y2) {
  setenv("NCCL_SHM_DISABLE", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_SHM_DISABLE);
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_value_y3) {
  setenv("NCCL_SHM_DISABLE", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_SHM_DISABLE);
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_value_n0) {
  setenv("NCCL_SHM_DISABLE", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_SHM_DISABLE);
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_value_n1) {
  setenv("NCCL_SHM_DISABLE", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_SHM_DISABLE);
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_value_n2) {
  setenv("NCCL_SHM_DISABLE", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_SHM_DISABLE);
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_value_n3) {
  setenv("NCCL_SHM_DISABLE", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_SHM_DISABLE);
}

TEST_F(CvarTest, NCCL_SHM_DISABLE_warn_unknown_val) {
  setenv("NCCL_SHM_DISABLE", "dummy", 1);
  testWarn("NCCL_SHM_DISABLE", "Unknown value");
}

TEST_F(CvarTest, NCCL_SHM_LOCALITY_value_0) {
  testNumValue<int64_t>("NCCL_SHM_LOCALITY", 0);
  EXPECT_EQ(NCCL_SHM_LOCALITY, 0);
}

TEST_F(CvarTest, NCCL_SHM_LOCALITY_value_1) {
  testNumValue<int64_t>("NCCL_SHM_LOCALITY", 9999);
  EXPECT_EQ(NCCL_SHM_LOCALITY, 9999);
}

TEST_F(CvarTest, NCCL_SHM_LOCALITY_value_2) {
  testNumValue<int64_t>("NCCL_SHM_LOCALITY", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_SHM_LOCALITY, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_SHM_LOCALITY_value_3) {
  testNumValue<int64_t>("NCCL_SHM_LOCALITY", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_SHM_LOCALITY, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_SHM_LOCALITY_default_value) {
  testDefaultValue("NCCL_SHM_LOCALITY");
  EXPECT_EQ(NCCL_SHM_LOCALITY, 2);
}

TEST_F(CvarTest, NCCL_SHM_MEMCPY_MODE_value_0) {
  testNumValue<int64_t>("NCCL_SHM_MEMCPY_MODE", 0);
  EXPECT_EQ(NCCL_SHM_MEMCPY_MODE, 0);
}

TEST_F(CvarTest, NCCL_SHM_MEMCPY_MODE_value_1) {
  testNumValue<int64_t>("NCCL_SHM_MEMCPY_MODE", 9999);
  EXPECT_EQ(NCCL_SHM_MEMCPY_MODE, 9999);
}

TEST_F(CvarTest, NCCL_SHM_MEMCPY_MODE_value_2) {
  testNumValue<int64_t>("NCCL_SHM_MEMCPY_MODE", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_SHM_MEMCPY_MODE, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_SHM_MEMCPY_MODE_value_3) {
  testNumValue<int64_t>("NCCL_SHM_MEMCPY_MODE", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_SHM_MEMCPY_MODE, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_SHM_MEMCPY_MODE_default_value) {
  testDefaultValue("NCCL_SHM_MEMCPY_MODE");
  EXPECT_EQ(NCCL_SHM_MEMCPY_MODE, 1);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_value_y0) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "y", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_SHM_USE_CUDA_MEMCPY);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_value_y1) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "yes", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_SHM_USE_CUDA_MEMCPY);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_value_y2) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "true", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_SHM_USE_CUDA_MEMCPY);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_value_y3) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "1", 1);
  ncclCvarInit();
  EXPECT_TRUE(NCCL_SHM_USE_CUDA_MEMCPY);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_value_n0) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "n", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_SHM_USE_CUDA_MEMCPY);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_value_n1) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "no", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_SHM_USE_CUDA_MEMCPY);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_value_n2) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "false", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_SHM_USE_CUDA_MEMCPY);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_value_n3) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "0", 1);
  ncclCvarInit();
  EXPECT_FALSE(NCCL_SHM_USE_CUDA_MEMCPY);
}

TEST_F(CvarTest, NCCL_SHM_USE_CUDA_MEMCPY_warn_unknown_val) {
  setenv("NCCL_SHM_USE_CUDA_MEMCPY", "dummy", 1);
  testWarn("NCCL_SHM_USE_CUDA_MEMCPY", "Unknown value");
}

TEST_F(CvarTest, NCCL_SOCKET_FAMILY_value_0) {
  setenv("NCCL_SOCKET_FAMILY", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_SOCKET_FAMILY, "val1");
}

TEST_F(CvarTest, NCCL_SOCKET_FAMILY_value_1) {
  setenv("NCCL_SOCKET_FAMILY", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_SOCKET_FAMILY, "val2_with_space");
}

TEST_F(CvarTest, NCCL_SOCKET_IFNAME_value_0) {
  setenv("NCCL_SOCKET_IFNAME", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_SOCKET_IFNAME, "val1");
}

TEST_F(CvarTest, NCCL_SOCKET_IFNAME_value_1) {
  setenv("NCCL_SOCKET_IFNAME", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_SOCKET_IFNAME, "val2_with_space");
}

TEST_F(CvarTest, NCCL_SOCKET_NTHREADS_value_0) {
  testNumValue<int>("NCCL_SOCKET_NTHREADS", 0);
  EXPECT_EQ(NCCL_SOCKET_NTHREADS, 0);
}

TEST_F(CvarTest, NCCL_SOCKET_NTHREADS_value_1) {
  testNumValue<int>("NCCL_SOCKET_NTHREADS", 9999);
  EXPECT_EQ(NCCL_SOCKET_NTHREADS, 9999);
}

TEST_F(CvarTest, NCCL_SOCKET_NTHREADS_value_2) {
  testNumValue<int>("NCCL_SOCKET_NTHREADS", std::numeric_limits<int>::max());
  EXPECT_EQ(NCCL_SOCKET_NTHREADS, std::numeric_limits<int>::max());
}

TEST_F(CvarTest, NCCL_SOCKET_NTHREADS_value_3) {
  testNumValue<int>("NCCL_SOCKET_NTHREADS", std::numeric_limits<int>::min());
  EXPECT_EQ(NCCL_SOCKET_NTHREADS, std::numeric_limits<int>::min());
}

TEST_F(CvarTest, NCCL_SOCKET_NTHREADS_default_value) {
  testDefaultValue("NCCL_SOCKET_NTHREADS");
  EXPECT_EQ(NCCL_SOCKET_NTHREADS, -2);
}

TEST_F(CvarTest, NCCL_THREAD_THRESHOLDS_value_0) {
  setenv("NCCL_THREAD_THRESHOLDS", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_THREAD_THRESHOLDS, "val1");
}

TEST_F(CvarTest, NCCL_THREAD_THRESHOLDS_value_1) {
  setenv("NCCL_THREAD_THRESHOLDS", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_THREAD_THRESHOLDS, "val2_with_space");
}

TEST_F(CvarTest, NCCL_TOPO_DUMP_FILE_value_0) {
  setenv("NCCL_TOPO_DUMP_FILE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_TOPO_DUMP_FILE, "val1");
}

TEST_F(CvarTest, NCCL_TOPO_DUMP_FILE_value_1) {
  setenv("NCCL_TOPO_DUMP_FILE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_TOPO_DUMP_FILE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_TOPO_DUMP_FILE_RANK_value_0) {
  testNumValue<int64_t>("NCCL_TOPO_DUMP_FILE_RANK", 0);
  EXPECT_EQ(NCCL_TOPO_DUMP_FILE_RANK, 0);
}

TEST_F(CvarTest, NCCL_TOPO_DUMP_FILE_RANK_value_1) {
  testNumValue<int64_t>("NCCL_TOPO_DUMP_FILE_RANK", 9999);
  EXPECT_EQ(NCCL_TOPO_DUMP_FILE_RANK, 9999);
}

TEST_F(CvarTest, NCCL_TOPO_DUMP_FILE_RANK_value_2) {
  testNumValue<int64_t>("NCCL_TOPO_DUMP_FILE_RANK", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_TOPO_DUMP_FILE_RANK, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_TOPO_DUMP_FILE_RANK_value_3) {
  testNumValue<int64_t>("NCCL_TOPO_DUMP_FILE_RANK", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_TOPO_DUMP_FILE_RANK, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_TOPO_FILE_value_0) {
  setenv("NCCL_TOPO_FILE", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_TOPO_FILE, "val1");
}

TEST_F(CvarTest, NCCL_TOPO_FILE_value_1) {
  setenv("NCCL_TOPO_FILE", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_TOPO_FILE, "val2_with_space");
}

TEST_F(CvarTest, NCCL_TOPO_FILE_default_value) {
  testDefaultValue("NCCL_TOPO_FILE");
  EXPECT_EQ(NCCL_TOPO_FILE, "/var/run/nvidia-topologyd/virtualTopology.xml");
}

TEST_F(CvarTest, NCCL_TUNER_PLUGIN_value_0) {
  setenv("NCCL_TUNER_PLUGIN", "val1", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_TUNER_PLUGIN, "val1");
}

TEST_F(CvarTest, NCCL_TUNER_PLUGIN_value_1) {
  setenv("NCCL_TUNER_PLUGIN", "  val2_with_space   ", 1);
  ncclCvarInit();
  EXPECT_EQ(NCCL_TUNER_PLUGIN, "val2_with_space");
}

TEST_F(CvarTest, NCCL_WARN_ENABLE_DEBUG_INFO_value_0) {
  testNumValue<int64_t>("NCCL_WARN_ENABLE_DEBUG_INFO", 0);
  EXPECT_EQ(NCCL_WARN_ENABLE_DEBUG_INFO, 0);
}

TEST_F(CvarTest, NCCL_WARN_ENABLE_DEBUG_INFO_value_1) {
  testNumValue<int64_t>("NCCL_WARN_ENABLE_DEBUG_INFO", 9999);
  EXPECT_EQ(NCCL_WARN_ENABLE_DEBUG_INFO, 9999);
}

TEST_F(CvarTest, NCCL_WARN_ENABLE_DEBUG_INFO_value_2) {
  testNumValue<int64_t>("NCCL_WARN_ENABLE_DEBUG_INFO", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_WARN_ENABLE_DEBUG_INFO, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_WARN_ENABLE_DEBUG_INFO_value_3) {
  testNumValue<int64_t>("NCCL_WARN_ENABLE_DEBUG_INFO", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_WARN_ENABLE_DEBUG_INFO, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_WORK_FIFO_DEPTH_value_0) {
  testNumValue<int64_t>("NCCL_WORK_FIFO_DEPTH", 0);
  EXPECT_EQ(NCCL_WORK_FIFO_DEPTH, 0);
}

TEST_F(CvarTest, NCCL_WORK_FIFO_DEPTH_value_1) {
  testNumValue<int64_t>("NCCL_WORK_FIFO_DEPTH", 9999);
  EXPECT_EQ(NCCL_WORK_FIFO_DEPTH, 9999);
}

TEST_F(CvarTest, NCCL_WORK_FIFO_DEPTH_value_2) {
  testNumValue<int64_t>("NCCL_WORK_FIFO_DEPTH", std::numeric_limits<int64_t>::max());
  EXPECT_EQ(NCCL_WORK_FIFO_DEPTH, std::numeric_limits<int64_t>::max());
}

TEST_F(CvarTest, NCCL_WORK_FIFO_DEPTH_value_3) {
  testNumValue<int64_t>("NCCL_WORK_FIFO_DEPTH", std::numeric_limits<int64_t>::min());
  EXPECT_EQ(NCCL_WORK_FIFO_DEPTH, std::numeric_limits<int64_t>::min());
}

TEST_F(CvarTest, NCCL_WORK_FIFO_DEPTH_default_value) {
  testDefaultValue("NCCL_WORK_FIFO_DEPTH");
  EXPECT_EQ(NCCL_WORK_FIFO_DEPTH, 65536);
}



/**
* END of generated tests
*/

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  ::testing::AddGlobalTestEnvironment(new NCCLEnvironment);
  return RUN_ALL_TESTS();
}
